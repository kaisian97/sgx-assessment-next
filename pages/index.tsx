import Head from 'next/head'
import { useState } from 'react'
import { Box, HStack, VStack } from '@chakra-ui/react'
import { FormProvider, useForm } from 'react-hook-form'

import {
  FormInput,
  Button,
  FormTextArea,
  FormUploadDropZone,
  Toast,
} from 'components/common'
import { SimpleFormValues } from './api/sendEmail'

export default function Home() {
  const [isSubmitting, setIsSubmitting] = useState(false)

  const formDefaultValues = {
    firstName: '',
    lastName: '',
    email: '',
    description: '',
    images: [],
  }

  const formMethods = useForm<SimpleFormValues>({
    mode: 'onChange',
    defaultValues: formDefaultValues,
  })

  const handleSubmit = formMethods.handleSubmit(async (values) => {
    setIsSubmitting(true)

    const res = await fetch('/api/sendEmail', {
      body: JSON.stringify({
        values,
      }),
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
    })
    const result = await res.json()

    setIsSubmitting(false)

    if (result.success) {
      Toast.success({
        title: 'Email Sent',
        description: `An email has been sent to ${values.email}`,
      })
      formMethods.reset()
    } else {
      Toast.error({
        title: 'Email Fail to Send',
        description: 'Sorry for the inconvenience',
      })
    }
  })

  return (
    <Box my="8" mx="auto" maxW="md" p="4">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <FormProvider {...formMethods}>
        <form onSubmit={handleSubmit}>
          <VStack spacing={6}>
            <HStack spacing={4} w="full">
              <FormInput name="firstName" label="First Name" isRequired />
              <FormInput name="lastName" label="Last Name" isRequired />
            </HStack>
            <FormInput
              name="email"
              label="Email"
              isRequired
              rules={{
                pattern: {
                  value:
                    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                  message: 'is not valid',
                },
              }}
            />
            <FormTextArea name="description" label="Description" isRequired />
            <FormUploadDropZone name="images" label="Images" />
            <Button
              colorScheme="teal"
              type="submit"
              isLoading={isSubmitting}
              disabled={!formMethods.formState.isValid}
            >
              Submit
            </Button>
          </VStack>
        </form>
      </FormProvider>
    </Box>
  )
}
